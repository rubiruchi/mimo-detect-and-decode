function [output, newLen, enc, enc_old] = ParPolarQAM(data, n, LEN, N, K, R, qamBitSize, qamTab, precode, H)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Simulate polar coding of bits in MIMO systems.
% Optionally can apply SVD precoding based on known channel matrix
%
% Inputs:
%   data - the generated MIMO messages
%   n - number of antennas.
%   LEN - number of symbols per antenna
%   N - number of bits after encoding per symbol
%   K - number of bits per symbol per antenna
%   R - polar coding rate
%       e.g. K=16, R=.5 -> 32 bits output of polar codes
%   qamBitSize - # of bits encoded into the QAM, e.g. 1 -> +/- 1 -> 2QAM/BPSK
%   qamTab - the table generated by ConstellationTable.m
%   precode - a binary flag for SVD precoding
%   H - the known channel, if available, used for precoding
%
% Outputs:
%   output - polarized modulated MIMO
%   newLen - number of symbols per antenna after polarizing and modulating
%   enc - polar encoded bits grouped into qamBitSize groups
%   enc_old - polar encoded bits grouped into N size groups
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%N = 8
%n = 2
% Create constallation table
qamTable = qamTab.table;
%This has changed in the parallel conversion
newLen = LEN*N/(n*qamBitSize);

enc = zeros(LEN, N); %antennas, nMessages, polarized bits
output = zeros(n, newLen); %antennas, nCodedMessages

if (precode)
    [U,D,V] = svd(H);
end

%disp('LEN is')
%disp(LEN)
%disp('NEW LEN is')
%disp('newLen')


for (kk = 1 : LEN)
        % polar encode each set of K bits at a time
    enc(kk,:) = pencode(data(kk,:));

end
%disp('here')
%disp(enc)
% reorder each chunk of N bits so that we have qamBitSize chunks instead
%enc_old = enc;
%remove n in the parallel code
%enc = reshape(enc,newLen*n, qamBitSize);
%disp(size(enc))
%enc = reshape(transpose(enc_old), n, newLen, qamBitSize);
%for (i=1:LEN)
%enc = reshape(enc_old.',1,[])


%enc = reshape((enc), newLen, n, qamBitSize);
%disp('N is')
%disp('Shape of enc after reshape is')
%disp(enc)
%enc = permute(enc, [2,1,3]);

%for (i=1:N/2)
%    enc_1 = 
enc_old = enc;

enc1 = reshape(transpose(enc(:,1:N/n)),1,[]);
enc2 = reshape(transpose(enc(:,N/n+1:end)),1,[]); 
enc = vertcat(enc1,enc2);
    
%disp('final')
%disp(enc)

for (k = 1:n)
    %msg = enc(k,:);
    msg = reshape(enc(k,:), newLen, qamBitSize); % [1,newLen,qamBitSize] -> [newLen, qamBitSize]
    %disp('msg is')
    %disp(msg)
    indices = bi2de(msg)+1; % convert to decimal index of table, +1 since matlab is 1 indexed
    output(k,:) = qamTable(indices); % use encoded bits on table to get moduated symbols
end

if (precode)
    output = V.*output;
end

end

