function zf = LinearMIMODecoder(n, Y, qamSize, qamTab, normAnt, normConst, Hest)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Simulate ZF decoding in MIMO systems.
%
% Inputs:
%   n - number of antennas.
%   Y - MIMO output
%   qamSize - Size of QAM constellation to be transnmitted in each antenna.
%             2 corresponds to {+-1}, 4 corresponds to {+-1, +-i},...
%   qamTab - table as generated by ConstellationTable.m
%   normAnt - a binary flag for normalizing the Tx power by 1/sqrt(n).
%   normConst - a binary flag for normalizing the Tx constellation to have
%               an average unit power.
%   Hest - the channel estimate
%
%   Output - performance plot.
%
%   Example: LinearMIMODecoder(4,Y,4,table,1,1)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Read constallation table
tab = qamTab.table;
normedEnergy = qamTab.normFactor;

antennaNorm = 1;
if (normAnt)
    antennaNorm = 1/sqrt(n);
end

wzf = pinv(Hest)*Y; % ZF
        
% WZF qam detector - closest qam
zf = qamDetector(wzf, qamSize, antennaNorm, normedEnergy);

m = sqrt(qamSize);
assert( m == round(m) );

% Reverse the QAM table transforms
Yhat = qamDecoder(zf, qamTab);

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-----------------------------------------------------------------%
function lut = qamDecoder(Y, qamTab)
% Reverse the QAM table transforms
% Y - the MIMO array
% qamTab - the table to use to decode, in form of 
%          ConstellationTable's struct (only use normFactor, qbs rn)
m = qamTab.qamBitSize;
lut = Y*qamTab.normFactor;
lut = lut +(m+1) + 1j*(m+1);
lut = real(lut)/2 + m*imag(lut)/2 -m;
end
%-----------------------------------------------------------------%
function r = qamDetector(y, qamSize, antennaNorm, constNorm)
    pamSize = sqrt(qamSize);
    
    re = pamDetector( real(y), pamSize, antennaNorm, constNorm );
    im = pamDetector( imag(y), pamSize, antennaNorm, constNorm );
    
    r = re + 1i*im;
end

%-----------------------------------------------------------------%
function r = pamDetector(y, pamSize, antennaNorm, constNorm)

r = zeros(size(y));

% calc constallation norm factor andnormalize back
oneSided = 2*[1:pamSize/2]-1;

ytmp = abs(y)*constNorm*antennaNorm;

for (kk = 1 : length(ytmp))
    
    if (ytmp(kk) > oneSided(end))
        r(kk) = oneSided(end);
        continue;
    end
    
    r(kk) = 2*floor(ytmp(kk)/2) + 1;    
    
end

r = r.*sign(y)/constNorm/antennaNorm;

end
