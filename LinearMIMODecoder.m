function [Yhat,wzf,zf] = LinearMIMODecoder(n, newLen, N, Y, qamTab, Hest, antennaNorm)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Simulate ZF decoding in MIMO systems.
%
% Inputs:
%   n - number of antennas.
%   newLen - number of coded modulated symbols sent per antenna
%   N - number of coded bits per message
%   Y - output of channel
%   qamTab - table as generated by ConstellationTable.m
%   Hest - the channel estimate
%   normAntenna - the scaling factor that H*X were multiplied by
%
% Outputs:
%   Yhat - the demodulated polar coded bits
%   wzf - equalized qam (no detection)
%   zf - ZF detected modulated symbols 
%
%   Example: LinearMIMODecoder(4,20,16,Y,table,Hest,1)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Read constallation table
tab = qamTab.table;
qamSize = qamTab.qamSize;
normedEnergy = qamTab.normFactor;

Yhat = zeros(n, newLen, qamTab.qamBitSize);

wzf = pinv(Hest)*Y; % ZF
        
% WZF qam detector - closest qam
for (i=1:n)
    zf(i,:) = qamDetector(squeeze(wzf(i,:)), qamSize, antennaNorm, normedEnergy);
end

% Reverse the QAM table transforms
qam = qamDecoder(zf, qamTab) -1;

% turn index to binary
for (i = 1:n)
    Yhat(i,:,:) = de2bi(squeeze(qam(i,:,:)));
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-----------------------------------------------------------------%
function lut = qamDecoder(Y, qamTab)
% Reverse the QAM table transforms
% Y - the MIMO array
% qamTab - the table to use to decode, in form of 
%          ConstellationTable's struct (only use normFactor, qbs rn)
m = qamTab.qamBitSize;
if (m==1)
  lut = (Y>0)+1;
else
  lut = Y*qamTab.normFactor;
  lut = lut +(m+1) + 1j*(m+1);
  lut = real(lut)/2 + m*imag(lut)/2 -m;
end
end
%-----------------------------------------------------------------%
function r = qamDetector(y, qamSize, antennaNorm, constNorm)
 if (qamSize==2)
    r = pamDetector( y, qamSize, antennaNorm, constNorm);
  else
    pamSize = sqrt(qamSize);
    
    re = pamDetector( real(y), pamSize, antennaNorm, constNorm );
    im = pamDetector( imag(y), pamSize, antennaNorm, constNorm );
    
    r = re + 1i*im;
  end
end

%-----------------------------------------------------------------%
function r = pamDetector(y, pamSize, antennaNorm, constNorm)

r = zeros(size(y));

% calc constallation norm factor andnormalize back
oneSided = 2*[1:pamSize/2]-1;

ytmp = abs(y)*constNorm*antennaNorm;

for (kk = 1 : length(ytmp))
    
    if (ytmp(kk) > oneSided(end))
        r(kk) = oneSided(end);
        continue;
    end
    
    r(kk) = 2*floor(ytmp(kk)/2) + 1;    
    
end

r = r.*sign(y)/constNorm/antennaNorm;

end
